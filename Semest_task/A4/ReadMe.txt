Вершины графа, который обходит алгоритм, имеют вид:

node(State,Length,H)

    State = текущее расписание, State = [event(ExamID,RoomID,Day,Hour)] - список событий. Каждое событие - это экзамен.
        ExamID = id экзамена
        RoomID = id аудитории
        Day    = день проведения экзамена
        Hour   = час начала экзамена
    Length = длина текущего расписания
    H = значение функции приоритета в алгоритме A*: общая стоимость расписания (сумма всех штрафов) + значение эвристической функции

Соответственно, расписание ищем именно в таком виде, искомым расписанием будет такой State,
что node(State,L,P) имеет наименьшую сумму штрафов и включает все экзамены в сессии, не нарушая обязательных ограчений.

-----------------------------------------------------------------------------------------------------------------------------------------------

Датасет содержит следующую информацию:

1. Список студентов: student(SID,Name): каждый студент имеет уникальный идентификатор 'SID' и имя 'Name'.

2. Список преподавателей: teacher(LID,Name): каждый преподаватель имеет уникальный идентификатор 'LID' и имя 'Name'.

3. Список курсов: class(CID,Name): каждый курс имеет уникальный идентификатор 'CID' и название 'Name'.

4. Список экзаменов: exam(EID,Name): каждый экзамен имеет уникальный идентификатор 'EID' и название 'Name'.

5. Список аудиторий: classroom(RID,Name): каждая аудитория имеет уникальный идентификатор 'RID' и название 'Name'.

6. Продолжительность экзамена: exam_duration(EID,Duration): Экзамен 'EID' продолжается 'Duration' часов.

7. Студенты, посещающие курс: follows(SID,CID): Студент 'SID' посещает курс 'CID'.

8. Преподаватели, читающие курс: teaches(LID,CID): Преподаватель 'LID' читает курс 'CID'. (Каждый курс читается только одним преподавателем!)

9. Вместимость аудиторий: classroom_capacity(RID,Capacity): Аудитория 'RID' может вместить до 'Capacity' студентов.

11. Первый день сессии: ex_season_starts(FirstDay). Задается числом: например exams_start(10) - сессия начинается 10-го числа.

12. Последний день сессии: ex_season_ends(LastDay). Если, например, сессия продолжается с 1 по 20-е число, то ex_season_starts(1) и ex_season_ends(20).

13. Доступность аудиторий: classroom_available(RID,Day,From,Till): Аудитория 'RID' доступна в день 'Day' с 'From' до 'Till' часов. Время задается числом: 9, 10, 14, ...

14. Время, необходимое для проверки результатов экзамена: c_correction_time(EID,Days): 'Days' дней необходимо для проверки экзамена 'EID'. (Не считая дня проведения экзамена!)

15. Время, требуемое на подготовку к экзамену: c_study_time(EID,Days): 'Days' дней требуется для подготовки к экзамену 'EID'. (Не считая дня проведения экзамена!).

16. См. код для более подробной информации.

-----------------------------------------------------------------------------------------------------------------------------------------------

########## Обязательные ограничения ########## 

    Все экзамены должны начинаться ровно в начале часа (например, в 15 часов, но не в 15:30).

    Экзамены могут быть проведены только в аудитории, которая свободна в течение всего времени, необходимого для проведения экзамена и вмещает
    всех студентов, которые должны сдавать экзамен.

    Два экзамена не могут быть проведены в одно и то же время, если существует хотя бы один студент, 
    который должен сдавать их оба, или преподаватель преподает оба курса.

    !! Расписание не считается валидным, если нарушено обязательное ограчение !!

############################################## 



############# Слабые ограничения #############

Данные ограничения не обязательны для соблюдения, однако несоблюдение их влечет штрафы. Лучшее расписание - такое, которое имеет наименьшую сумму штрафов.

    c_lunch_break(PID,Penalty): Штраф 'Penalty' налагается на каждый экзамен, на котором персона (преподаватель или студент) 'PID' должна присутствовать во время обеда (с 12 до 13 часов).

    c_no_exam_in_period(LID,Day,From,Till,Penalty): Штраф 'Penalty' налагается для каждого экзамена, который преподаватель 'LID' должен вести в день 'Day', в период с 'From' до 'Till' часов. Другими словами, это выражение индивидуального предпочтения преподавателя - ему по каким-то причинам неудобно проводить экзамен в данное время, но он сделает это при необходимости.
    
    c_not_in_period(PID,EID,Day,From,Till,Penalty): Штраф 'Penalty' налагается, если экзамен 'EID' проводится в день 'Day', в период с 'From' до 'Till' часов. Это также ограничение преподавателей 'PID'.
    
    c_no_exams_same_day(PID,Penalty): Штраф 'Penalty' налагается для каждой пары экзаменов, на которых персона 'PID' должна присутствовать в один день. Например, если человек имеет 3 экзамена за один день, то штраф налагается 3 раза.
    
    c_no_exams_in_row(PID,Penalty): Штраф 'Penalty' налагается для каждой пары экзаменов, на которых персона 'PID' должна присутствовать, и которые идут подряд (back-to-back). Например, если у человека 3 экзамена подряд, то штраф наложится дважды.
    
    c_not_enough_correction_penalty(LID,Penalty): Штраф 'Penalty' налагается за каждый день, которого недостало преподавателю для проверки экзамена.

    c_not_enough_study_penalty(SID,Penalty): Штраф 'Penalty' налагается за каждый день, которого студенту 'SID' не хватило для подготовки к экзамену. Студенты могут готовиться к экзамену в день проведения другого экзамена (знаю, что не могут, но по условию могут). Соответственно, если, например, у студента в первый же день сесии 2 экзамена, на подготовку к которым надо минимум 2 дня, то штраф суммируется 4 раза, т.к. не было вообще времени на подготовку.

    Это были некоторые примеры, далее см. код.

##############################################